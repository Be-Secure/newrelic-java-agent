plugins {
    id 'com.github.prokod.gradle-crossbuild' version '0.14.1' apply false
    id "org.jetbrains.kotlin.jvm" version "1.6.20" apply false
    id "com.newrelic.gradle-verify-instrumentation-plugin" version "4.0" apply false
    id "com.newrelic.gradle-compatibility-doc-plugin" version "1.1" apply false
    id "jacoco"
}

allprojects {
    apply plugin: 'idea'

    // ignores MANIFEST.MF
    normalization {
        runtimeClasspath {
            metaInf {
                ignoreManifest()
            }
        }
    }

    group = 'com.newrelic.agent.java'
    version = agentVersion + (project.findProperty("release") == "true" ? "" : "-SNAPSHOT")

    idea.module {
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }

    if (project.convention.findPlugin(JavaPluginConvention)) {
        // Change the output directory for the main and test source sets back to the old path
        sourceSets.main.output.classesDir = new File(buildDir, "classes/main")
        sourceSets.test.output.classesDir = new File(buildDir, "classes/test")
    }

    tasks.withType(Copy) {
        includeEmptyDirs = false
    }
}

// This fixes an issue with intellij where the test output build path is incorrect for the top-level java_agent module
idea.module {
    testOutputDir = file('test')
    excludeDirs += file("automation")
}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    def isJavaProject = ![
            'instrumentation',  // is a parent project
            'instrumentation-build', // is a build utility
            'newrelic-java', // this is a project used exclusively for bundling the zip file.
            'infinite-tracing', // has its own plans
    ].contains(project.name)
    if (isJavaProject) {
        project.ext.javaProject = true

        apply from: "$rootProject.projectDir/gradle/script/java.gradle"
    } else {
        // This fixes an issue with intellij where the test output build path is incorrect for non-java projects
        idea.module {
            testOutputDir = file('test')
        }
    }
}

ext {
    // when upgrading ASM, check the javadoc for the following classes:
    // SynchronizedAnnotationNode, SynchronizedClassNode, SynchronizedFieldNode, SynchronizedInnerClassNode, SynchronizedMethodNode,
    // SynchronizedModuleExportNode, SynchronizedModuleNode, SynchronizedModuleOpenNode, SynchronizedModuleProvideNode, SynchronizedModuleRequireNode,
    // SynchronizedTypeAnnotationNode
    asmVersion=9.3
    //some modules do not setup well for jacoco run. This is a list to exclude those until they
    //can be included or reported on seaparately.
    excludedSubprojects = [':infinite-tracing']

}

ext {
}

task jacocoCombinedTestReport(type: JacocoReport) {
    dependsOn(subprojects.findAll { it.hasProperty('test') && !excludedSubprojects.contains(it.path) }.collect { it.test })

    subprojects.each { subproject ->
        if (subproject.hasProperty('test')) {
            executionData(subproject.test)
        }
        if (subproject.hasProperty('sourceSets')) {
            additionalSourceDirs.from(subproject.sourceSets.main.allSource)
            sourceDirectories.from(subproject.sourceSets.main.allSource)
            classDirectories.from(subproject.sourceSets.main.output)
        }
    }

    reports {
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacocoCombinedTestReport')
    }
}

//check.dependsOn jacocoCombinedReport