import com.newrelic.agent.instrumentation.verify.VerifyTask
apply plugin: 'jacoco'
subprojects {

    // the version of all instrumentation projects.
    version = 1.0

    // pull in shared instrumentation build logic
    apply from: "$rootProject.projectDir/gradle/script/instrumentation.gradle"

    // Add JaCoCo plugin
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = "0.8.10"  // Set the version of JaCoCo you want to use
        reportsDir = file("$buildDir/reports/jacoco")
    }
    tasks.withType(Test) { task ->
        task.enabled = !project.hasProperty('noInstrumentation')
    }

    tasks.withType(AbstractArchiveTask) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    // prevents caching of verify instrumentation tasks
    tasks.withType(VerifyTask) { task ->
        task.outputs.upToDateWhen { return false }
    }

    jar {
        manifest {
            attributes 'Implementation-Vendor': 'New Relic', 'Implementation-Version': project.version
        }
    }

    dependencies {
        testImplementation(project(":instrumentation-test"))
    }

    test {
        // FIXME: these are all flaky on GHA so temporarily disabling
        // It is likely they can be fixed with test containers
        exclude '**/BasicRequestsTest.class'
        exclude '**/BlazeClientTest'
        exclude '**/CassandraTest.class'
        exclude '**/DefaultDynamoDbClient_InstrumentationTest.class'
        exclude '**/QuartzSystemTest.class'
        exclude '**/RabbitMQTest.class'

        finalizedBy jacocoTestReport  // report is always generated

        jacocoTestReport {
            dependsOn test

            reports {
                xml.enabled true
                html.outputLocation = layout.buildDirectory.dir('reports/jacoco')            }
        }
    }
}

task test {
    dependsOn subprojects.collect {
        it.tasks.getByName 'test'
    }
}

def isScalaProjectEnabled(Project project, String... scalaVersions) {
    return scalaVersions.any {scalaVersion -> project.hasProperty(scalaVersion) }  ? project.tasks.all { task -> task.enabled = true }  // Enable tasks if project property matching scala version is passed
            : project.hasProperty('noInstrumentation') ? project.tasks.all { task -> task.enabled = false } // Disable tasks if project property noInstrumentation is passed
            : project.tasks.all { task -> task.enabled = task.name != "test" && task.name != "compileTestScala" ? task.enabled : task.enabled && project.hasProperty('includeScala')  }  // Default to task enabled flag
}
