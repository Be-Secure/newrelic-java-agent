import com.nr.builder.JarUtil

apply plugin: 'java'

subprojects {
    dependencies {
        // introspector classes for testing externals
        testImplementation(project(":instrumentation-test"))
    }
}

ext.moduleName = "com.greetings"

dependencies {
    implementation("junit:junit:4.13")
}

compileJava {
    inputs.property("moduleName", "com.greetings")
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName=" + files(sourceSets.main.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

compileJava.options.encoding = 'UTF-8'
compileJava.options.fork = true

// Compile with Java 11 to test module support
compileJava.options.forkOptions.executable = jdk11 + '/bin/javac'
compileJava.options.forkOptions.javaHome = new File(jdk11)

compileTestJava.options.encoding = 'UTF-8'
compileTestJava.options.fork = true

// Compile with Java 11 to test module support
compileTestJava.options.forkOptions.executable = jdk11 + '/bin/javac'
compileTestJava.options.forkOptions.javaHome = new File(jdk11)

// Boot classpath no longer works in JDK 9+ so we should ignore it here
compileJava.options.bootstrapClasspath = null

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def module_test_args = [
        "-javaagent:${project.jar.archivePath.absolutePath}",
        "-javaagent:${JarUtil.getNewRelicJar(project(":newrelic-agent")).absolutePath}",
        "-Dnewrelic.config.file=${project(':newrelic-agent').projectDir}/src/test/resources/com/newrelic/agent/config/newrelic.yml",
        "-Dnewrelic.unittest=true",
        "-Dnewrelic.config.startup_log_level=warn",
        "-Dnewrelic.debug=$newrelicDebug",
        "--module-path=lib:out/production/classes",
        "--add-modules com.greetings",
        "--module junit/org.junit.runner.JUnitCore"
]

test {
    dependsOn(project(":newrelic-agent").getTasksByName("newrelicJar", false))
    forkEvery = 1
    maxParallelForks = Runtime.runtime.availableProcessors()

    executable = jdk11 + '/bin/java'

    minHeapSize = "256m"
    maxHeapSize = "256m"

    beforeSuite {
        descriptor ->
            // We get two notifications per Test class. One of them is simply the Gradle executor used to run the test
            // We filter that one out and only log the Test class name with this null check.
            if (descriptor.getClassName() != null) {
                logger.lifecycle("Running test suite: " + descriptor.getClassName())
            }
    }
}

javadoc {
    onlyIf { JavaVersion.current().isJava11Compatible() }
}